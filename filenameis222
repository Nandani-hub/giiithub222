#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;
    struct Node* next;
};

// Head pointer for the list
struct Node* head = NULL;

// Function to insert at the beginning
void insertAtBeginning(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = head;
    head = newNode;
    printf(" Inserted %d at the beginning.\n", value);
}

// Function to insert at the end
void insertAtEnd(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
    printf(" Inserted %d at the end.\n", value);
}

// Function to insert after a specific value
void insertAfter(int target, int value) {
    struct Node* temp = head;
    while (temp != NULL && temp->data != target)
        temp = temp->next;

    if (temp == NULL) {
        printf(" Node with value %d not found.\n", target);
        return;
    }

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = temp->next;
    temp->next = newNode;
    printf(" Inserted %d after %d.\n", value, target);
}

// Function to delete a node by value
void deleteNode(int value) {
    struct Node *temp = head, *prev = NULL;

    // If head node itself holds the value
    if (temp != NULL && temp->data == value) {
        head = temp->next;
        free(temp);
        printf("Deleted node with value %d.\n", value);
        return;
    }

    // Search for the value
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }

    // If not found
    if (temp == NULL) {
        printf(" Node with value %d not found.\n", value);
        return;
    }

    // Unlink and delete
    prev->next = temp->next;
    free(temp);
    printf(" Deleted node with value %d.\n", value);
}

// Function to traverse and display the list
void traverse() {
    struct Node* temp = head;
    if (temp == NULL) {
        printf(" List is empty.\n");
        return;
    }

    printf("ðŸ”— Linked List: ");
    while (temp != NULL) {
        printf("%d â†’ ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function
int main() {
    int choice, val, after;

    do {
        printf("\n===== Singly Linked List Menu =====\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert After a Node\n");
        printf("4. Delete a Node\n");
        printf("5. Traverse List\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &val);
                insertAtBeginning(val);
                break;
            case 2:
                printf("Enter value to insert: ");
                scanf("%d", &val);
                insertAtEnd(val);
                break;
            case 3:
                printf("Enter value after which to insert: ");
                scanf("%d", &after);
                printf("Enter value to insert: ");
                scanf("%d", &val);
                insertAfter(after, val);
                break;
            case 4:
                printf("Enter value to delete: ");
                scanf("%d", &val);
                deleteNode(val);
                break;
            case 5:
                traverse();
                break;
            case 6:
                printf(" Exiting program.\n");
                break;
            default:
                printf(" Invalid choice. Try again.\n");
        }

    } while (choice != 6);

    return 0;
}
